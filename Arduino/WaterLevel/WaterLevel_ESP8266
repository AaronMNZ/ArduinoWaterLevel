
#include <DallasTemperature.h>
#include <ESP8266WiFi.h>
#include <OneWire.h>
#include <DNSServer.h>            //Local DNS Server used for redirecting all requests to the configuration portal
#include <ESP8266WebServer.h>     //Local WebServer used to serve the configuration portal
#include <WiFiManager.h>          //https://github.com/tzapu/WiFiManager WiFi Configuration Magic
#include <TM1637Display.h>


//Ultrasonic
#define TRIGGER 14 //D5
#define ECHO    12 //D6
long duration, distance;          // Duration used to calculate distance

//Temperature
#define ONE_WIRE_BUS 13 //D7
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

//Cloud upload
char server[] = "example.com"; 
WiFiClient client;

//TM1637 LCD Screen
const int CLK = 4; //Set the CLK pin connection to the display
const int DIO = 5; //Set the DIO pin connection to the display
TM1637Display display(CLK, DIO);  //set up the 4-Digit Display.


//Smoothing of ultrasonic readings - https://www.arduino.cc/en/Tutorial/Smoothing
int total = 0;                  // the running total
int average = 0;                // the average
int numReadings = 8;



//WiFi custom values
char email[40];
bool shouldSaveConfig = false;  //flag for saving data

//callback notifying us of the need to save config
void saveConfigCallback () {
  Serial.println("Should save config");
  shouldSaveConfig = true;
}


//static const uint8_t D0   = 3;
//static const uint8_t D1   = 1;
//static const uint8_t D2   = 16;
//static const uint8_t D3   = 5;
//static const uint8_t D4   = 4;
//static const uint8_t D5   = 14;
//static const uint8_t D6   = 12;
//static const uint8_t D7   = 13;
//static const uint8_t D8   = 0;
//static const uint8_t D9   = 2;
//static const uint8_t D10  = 15;
//static const uint8_t D11  = 13;
//static const uint8_t D12  = 12;
//static const uint8_t D13  = 14;
//static const uint8_t D14  = 4;
//static const uint8_t D15  = 5;



void setup() {

  Serial.begin (115200);
  pinMode(TRIGGER, OUTPUT);
  pinMode(ECHO, INPUT);

  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);

  display.setBrightness(0x0a);  //set the diplay to maximum brightness
  display.showNumberDec(8888); //Display the Variable value;

  WiFiManager wifiManager;

  // id/name, placeholder/prompt, default, length
  WiFiManagerParameter email_value("Email", "Email Address", "", 25);
  wifiManager.addParameter(&email_value);

  //If button pressed force a reset back to defaults
  if (digitalRead(0) == LOW)  {
    wifiManager.resetSettings();
    Serial.println("Wifi settings cleared.");
  }

  wifiManager.autoConnect("WaterMeter");

  //Must be connected to WiFi at this point.
  Serial.println("Connected to WiFi)");
  
  //Get sensor data and log it.
  sensors.begin();
  Main();

  //delay(20000); //leave it on so can upload...
  
  //Logged data, put to sleep.
  Serial.println("Going to sleep....");
  ESP.deepSleep(90e6);    

}


void Main() {
  //Get temp
  sensors.requestTemperatures();
  double temp = sensors.getTempCByIndex(0);
  Serial.print("Temperature is: ");
  Serial.println(temp);

  //Get Distance
  for (int i=1; i <= numReadings; i++) 
  { 
    long dist = getDistance(); 
    if (dist > 1) { total = total + dist;}
    else          { numReadings--;}
    delay(100);
  }
    
  Serial.print("Total readings: ");
  Serial.println(numReadings);
  average = total / numReadings;
    
  //long dist = getDistance();
  Serial.print("Distance is: ");
  Serial.println(average);
  Serial.println("");
  
  //Get Battery Voltage (tied to A0 pin)
  int sensorValue = analogRead(A0); //read the A0 pin value
  float voltage = sensorValue * (3.33 / 1023.00) * 2 ; //convert the value to a true voltage.

  int displayLevel = 0;
  if (average > 1)
  {
    displayLevel = 100 * (2299 - (average - 110)) / 2300  ; //Calculate percentage for local display
    Serial.print("Percent full: ");
    Serial.println(displayLevel);
  }

  display.showNumberDec(displayLevel); //Display the Variable value on 4 digit LED
  

//LogData(double temp1, double temp2, double volt1, double volt2, int distance, String email, String uid)   
  LogData(temp, 0, voltage, 0, average, "email@email.com", "00000000-0000-0000-0000-000000000001");
}

void loop() {}

int getDistance() {
  /* The following trigPin/echoPin cycle is used to determine the
    distance of the nearest object by bouncing soundwaves off of it. */
  digitalWrite(TRIGGER, LOW);
  delayMicroseconds(2);

  digitalWrite(TRIGGER, HIGH);
  delayMicroseconds(10);

  digitalWrite(TRIGGER, LOW);
  duration = pulseIn(ECHO, HIGH);

  //Calculate the distance (in mm) based on the speed of sound.
  //long distance = duration / 5.82;  //mm not too accurate, to return CM, use 58.2
  long distance = (duration / 2) * 0.343;  

  Serial.print("Duration before check: ");
  Serial.println(duration);
  Serial.print("Distance before check: ");
  Serial.println(distance);
  
  if (distance >= 4000 || distance <= 0) {
    /* Send a negative number to computer to indicate "out of range" */
    return -1;
  }
  else {
    return distance;
  }

}

void LogData(double temp1, double temp2, double volt1, double volt2, int distance, String email, String uid) {

  // if you get a connection, report back via serial:
  if (client.connect(server, 80)) {

    Serial.println (client.status());
    Serial.print ("Connected, logging.....  ");
    String postData = "l=" + String(distance) + "&t=" + String(temp1); //+ "&t2=" + String(temp2)+ "&v1=" + String(volt1) + "&v2=" + String(volt2) + "&email=" + email + "&uid=" + uid;

    client.println("POST /<loggingurl> HTTP/1.1");
    client.println("Host: servername");
    client.println("Cache-Control: no-cache");
    client.println("Connection: close");
    client.println("Content-Type: application/x-www-form-urlencoded;");
    client.print  ("Content-Length: ");
    client.println(postData.length());

    client.println();
    client.println(postData);

    delay(1000);

    Serial.print ("Connected:");
    Serial.println (client.connected());
    Serial.print ("Avial    :");
    Serial.println (client.available());

    Serial.println();
    Serial.println("Start of response");
    while (client.available()) {
      char c = client.read();
      Serial.write(c);
    }
    Serial.println();
    Serial.println("End of response");    
    client.stop();

    Serial.println (postData);
    Serial.println ("Logged ");

  }
  else {
    // kf you didn't get a connection to the server:
    Serial.println("connection failed");
    delay(50);
    void(* resetFunc) (void) = 0; //declare reset function @ address 0
    resetFunc();  //call reset
  }
}

char* tempToAscii(double temp) {
  char ascii[32];
  int frac;
  frac = (unsigned int)(temp * 1000) % 1000; //get three numbers to the right of the decimal point
  itoa((int)temp, ascii, 10);
  strcat(ascii, ".");
  itoa(frac, &ascii[strlen(ascii)], 10); //put the frac after the deciaml

return ascii;
}
